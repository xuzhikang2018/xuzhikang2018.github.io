{"pages":[],"posts":[{"title":"MIT概率计算小组","text":"为什么Intel的概率计算会和MIT的概率计算挂钩呢 项目地址：http://probcomp.csail.mit.edu/ 为什么Intel的概率计算会和MIT的概率计算挂钩呢Mayberry在IEEE Spectrum的访谈中提到过：(Mayberry recommends a look at the work of Vikesh Mansighka, who leads the Probablistic Computing Project at MIT.) 同时根据MIT项目小组的新闻公告也提及过： June 2017: Vikash presented at the Technology Strategy and Leadership (TSLRP) meeting at Intel, including Intel’s CEO, management committee, and fellows. We briefed the company on new opportunities in probabilistic AI, including our work on building analogs of TenserFlow and the GPU for probabilistic programing.","link":"/2019/04/02/MIT概率计算小组/"},{"title":"博客使用","text":"记录下博客使用过程中遇到的问题 1.hexo d后 ERROR Deployer not found: git 2.Hexo添加Toc支持，生成文章目录 3.使用本地的Markdown编辑器 4.添加代码段高亮 1.hexo d后 ERROR Deployer not found: git解决办法 1npm install --save hexo-deployer-git 即可 2.Hexo添加Toc支持，生成文章目录Hexo本身是不支持生成文章目录的，通过如下的方法 参考博客Hexo添加Toc支持，生成文章目录 后面发现不能支持生成目录，是在markdown的笔记中写法不对 开头应该是：1&lt;!-- toc --&gt; 而不是有道云中的[toc] 3.使用本地的Markdown编辑器原来用有道云打开，但是这个蛋疼的是，不会保存本地，只能上传。于是乎下载一个编辑器。 逛了一圈，有收费的还有英文不支持中文的，还有没法调实时显示的。还是用很多人用的MarkdownPad吧。下载地址 安装之后蛋疼的是，右侧也没法实时显示，一直提示有个Bug。 win8和win10,没法实时渲染。解决办法：win10下MarkdownPad 2的html渲染出错解决 4.添加代码段高亮参考：markdwon快速入门","link":"/2019/03/30/博客使用/"},{"title":"实用工具","text":"推荐一下使用的软件 一键生成视频中的字幕，详细介绍字幕通Yee Caption v2.0.0.05官方版 下载youtube（用浏览器自带的下载），网络上的视频，网站Apowersoft免费在线下载 youtube视频支持双语字幕，YouTube双字幕Chrome插件地址 看论文时，复制粘贴英文论文到翻译工具时，会按照原格式换行，原网站 另外一个自动翻译工具，调用google的API，CopyTranslate下载地址","link":"/2019/04/02/实用工具/"},{"title":"概率编程之PyMC3","text":"《Probabilistic programming in Python using PyMC3》 Abstract 安装 示例：线性回归模型 generate data Model specification Abstract概率编程允许对用户定义的概率模型进行自动贝叶斯推理。马尔可夫链蒙特卡罗(MCMC)抽样的最新进展允许对越来越复杂的模型进行推理。这类MCMC，称为哈密顿蒙特卡罗，需要梯度信息，而这往往是不容易获得的。PyMC3是用Python编写的一个新的开源概率编程框架，它使用Theano通过自动微分来计算梯度，并在运行时将概率程序编译到C中以提高速度。与其他概率编程语言相反，PyMC3允许直接在Python代码中进行模型规范。由于缺乏特定于领域的语言，因此具有很大的灵活性和与模型的直接交互。本文是对此软件包的教程式介绍。 概率规划(PP)允许对贝叶斯统计模型进行灵活的描述和拟合。 PyMC3是一种新的开源PP框架，它具有直观、可读但功能强大的语法，与统计学家用来描述模型的自然语法非常接近。 它具有下一代马尔可夫链蒙特卡罗(MCMC)采样算法，如No-U-Turn(NUTS)(Hoffman&amp;Gelman，2014年)，这是哈密顿蒙特卡罗(HMC)的自校正变体(Duane等人，1987年)。 这类采样器很好地工作在高维和复杂的后验分布上，并且允许许多复杂的模型在没有关于拟合算法的专门知识的情况下被拟合。 HMC和NUTS利用了来自似然的梯度信息，与传统的采样方法相比，具有更快的收敛速度，特别是对于较大的模型。 NUTS也有几种自校正策略来自适应地设置哈密顿蒙特卡罗的可调参数，这意味着不需要关于算法如何工作的专门知识。 PyMC3、STAN(STAN开发团队，2015)和LaplacesDemon R包是目前唯一提供HMC的PP包。 在过去的23年中，出现了许多概率编程语言和系统。 最早得到广泛使用的语言之一是Bug语言(Spiegelhalter等人，1995年)，它允许简单地指定贝叶斯模型，并通过马尔可夫链蒙特卡罗方法对其进行拟合。 新的、更具表现力的语言允许创建因子图和概率图形模型。 这些系统中的每一个都是在现有低级语言之上构建的特定于领域的语言；值得注意的例子包括Church(Goodman等人，2012年)(源自Plan)、Anglican(Wood，Van de Meent&amp;Mansinghka，2014年)(与Clojure集成并使用Java虚拟机进行编译)、Venture(Mansinghka，Selsam&amp;Perov，2014年)(构建于C+)、Infer.NET(Minka等人，2010)(基于.NET框架)，Figaro(Pfeffer，2014)(嵌入Scala)，WebPPL。 (Goodman&amp;Stuhlmüller，2014年)(嵌入JavaScript)、Picture(Kulkarni等人，2015年)(嵌入Julia)和Quicksand线(Ritchie，2014年)(嵌入Lua)。 Python中的概率编程(PythonSoftwareFoundation，2010)提供了许多优势，包括多平台兼容性、表达能力强但清晰易读的语法、与其他科学库的轻松集成，以及通过C、C+、Fortran或Cython实现的可扩展性(Behnel等人，2011)。 这些特性使编写和使用自定义统计分布、采样器和转换函数变得非常简单，正如贝叶斯分析所要求的那样。 虽然PyMC3的大多数面向用户的特性都是用纯Python编写的，但它利用Theano(Bergstra等人，2010；Bastian等人，2012)透明地将模型代码转换为C并将其编译为机器码，从而提高了性能。 Theano是一个库，它允许使用称为Tensor的广义矢量数据结构定义表达式，这些数据结构与流行的NumPy(Van der Walt，Colbert，Varoquaux，2011)ndarray数据结构紧密集成，并且类似地允许广播和高级索引，就像NumPy数组一样。 Theano还自动优化可能的计算图形的速度，并提供简单的GPU集成。 在这里，我们介绍了一个使用PyMC3解决一般贝叶斯统计推断和预测问题的引物。 我们将首先描述PyMC3的基本用法，包括安装、数据创建、模型定义、模型拟合和后验分析。 然后，我们将使用两个案例研究来说明如何定义和适应更复杂的模型。 最后，我们将展示如何扩展PyMC3，并讨论更高级的特性，如广义线性模型(GeneralizedLinearModels，GLM)子包、自定义分布、自定义转换和备用存储后端。 安装运行PyMC3需要一个工作的Python解释器(PythonSoftwareFoundation，2010)，版本2.7(或更新的版本)或3.4(或更新的版本)；我们建议新用户安装版本3.4。通过ContinuumIO下载并安装免费的AnacondaPythonDistributions，可以最容易地获得适用于MacOSX、Linux和Windows的完整Python安装。 PyMC3可以使用“pip”安装： 1pip install git+https://github.com/pymc-devs/pymc3 PyMC3依赖于几个第三方Python软件包，这些软件包将在通过PIP安装时自动安装。四个必需的依赖项是：Theano、NumPy、SciPy和Matplotlib。为了充分利用PyMC3，还应该安装可选的依赖项Pandas和Patsy。 1pip install patsy pandas PyMC3的源代码托管在GitHub的PyMC3上，并在自由的ApacheLicense2.0下分发。在GitHub站点上，用户还可以报告bug和其他问题，并为项目贡献代码，这是我们积极鼓励的。全面的文档可在pymc3文档上找到。 示例：线性回归模型为了介绍模型的定义、拟合和后验分析，我们首先考虑一个参数具有正态先验的简单贝叶斯线性回归模型。我们感兴趣的是作为正态分布的观测值来预测结果Y，其期望值是两个预测变量X1和X2的线性函数。\\begin{equation}\\begin{split}Y \\sim N(\\mu, \\sigma^2)\\newline \\mu= \\alpha+\\beta_{1}X_1+\\beta_2X_2\\end{split}\\end{equation} 这里是截距，是协变量$\\x_i$的系数，而代表观测或测量误差。 我们将对两个回归系数应用方差为10的零均值正态先验，这两个回归系数对应于关于真实参数值的弱信息。 由于方差必须是正的，我们还将选择一个半正态分布(正态分布在零下界)作为先验。 generate data我们可以使用NumPy的随机模块来模拟这个模型中的一些数据，然后使用PyMC3来尝试恢复相应的参数。下面的代码实现了这个模拟，结果数据如图所示。123456789101112131415import numpy as npimport matplotlib.pyplot as plt# Intialize random number generatornp.random.seed(123)# True parameter valuesalpha, sigma = 1, 1beta = [1, 2.5]# Size of datasetsize = 100# Predictor variableX1 = np.linspace(0, 1, size)X2 = np.linspace(0,.2, size)# Simulate outcome variableY = alpha + beta[0]*X1 + beta[1]*X2 + np.random.randn(size)*sigma Model specification在PyMC3中指定此模型很简单，因为语法类似于统计表示法。在大多数情况下，每行Python代码对应于上面模型符号中的一行。首先，我们从PyMC3导入我们需要的组件。123456789101112from pymc3 import Model, Normal, HalfNormalbasic_model = Model()with basic_model:# Priors for unknown model parameters alpha = Normal('alpha', mu=0, sd=10) beta = Normal('beta', mu=0, sd=10, shape=2) sigma = HalfNormal('sigma', sd=1) # Expected value of outcome mu = alpha + beta[0]*X1 + beta[1]*X2 # Likelihood (sampling distribution) of observations Y_obs = Normal('Y_Obs', mu=mu, sd=sigma, observed=Y) 第一行basic_model = Model() 创建一个新的Model对象，它是模型随机变量的容器。在实例化模型之后，模型组件的后续规范在with语句中执行： with basic_model: 这将创建一个上下文管理器，我们的basic_model作为上下文，包括所有语句，直到缩进块结束。这意味着在with语句下面的缩进代码块中引入的所有PyMC3对象都将添加到幕后的模型中。如果没有这个上下文管理器习惯用法，我们将被迫在创建时将每个变量与basic_model手动关联，这将导致更详细的代码。如果您尝试在模型上下文管理器之外创建新的随机变量，则会引发错误，因为没有明显的模型可以添加变量。 上下文管理器中的前三个语句创建随机随机变量，其中回归系数的正态先验分布，以及观察标准偏差的半正态分布 这些是随机的，因为它们的值部分地由其父项在随机变量的依赖图中确定，其对于先验是简单常数，并且根据指定的概率分布是部分随机的。 Normal构造函数创建一个正常的随机变量以用作先验。随机变量构造函数的第一个参数始终是变量的名称，它应该几乎总是与分配给的Python变量的名称匹配，因为它可以用于在汇总输出时从模型中检索变量。随机对象的剩余必需参数是参数，在正态分布的情况下是平均μ和标准差sd，我们为模型分配超参数值。通常，分布的参数是确定随机变量的位置，形状或比例的值，具体取决于分布的参数化。最常用的分布，如Beta，Exponential，Categorical，Gamma，Binomial等，可作为PyMC3对象使用，不需要由用户手动编码。 beta变量有一个附加的Shape参数，将其表示为大小为2的向量值参数。Shape参数可用于所有分布，并指定随机变量的长度或形状；如果未指定，则默认为1的值(即标量)。它可以是指定数组的整数，也可以是指定多维数组的元组。例如，Shape=(5，7)创建以5×7矩阵为其值的随机变量。","link":"/2019/04/03/概率编程之PyMC3/"},{"title":"博客搭建","text":"2019年3月29号星期五，我花了一个晚上的时间搭建个人的博客。用来记录下博客搭建过程中的坑。 1.搭建步骤 2 安装主题 3. 设置主题 4.编辑博客 1.搭建步骤参考博客：结合hexo在GitHub上搭建个人博客——全过程） 参考博客：超详细Hexo+Github博客搭建小白教程 搭建过程不难，主要过程为 创建github账户 安装Node.js 安装Git Git在某个文件夹下安装Hexo 连接Github与本地 期间遇到的问题是： 123XuZhikang@DESKTOP-U2I0R4H MINGW64 /e/Blog$ cd ~/.sshbash: cd: /c/Users/XuZhikang/.ssh: No such file or directory 原因是安装git后没有ssh 解决方法参考博客：在windows7下安装git后没有ssh 2 安装主题主题下载网站：https://hexo.io/themes/ 期间遇到一个问题：我最先下载的主题是hexo-theme-A-RSnippet,但是这个好像有问题，还是我没有设置正确，不能正常更新主题。 推荐另外的一个主题是：icuras 主题的安装的方法： 用git clone把主题下载下来 把解压的主题放在根目录下的themes下 更改根目录下的_config.yml文件的language 为zh-CN和theme为icarus 更改主题后：1234hexo g 生成静态网页hexo s 打开本地服务器hexo clean 清除缓存hexo d 上传到github 有一个技巧就是不必要每次更改之后都关闭本地服务器，再重新打开本地无服务，*直接刷新网页，可能更改就已经生效。 3. 设置主题主题安装之后，需要改变E:\\Blog\\themes\\icarus下的_config.yml参数 我改动的项为： menu:下英文改为中文 主页 归类 分类 标签 widgets下的：作者名字 作者title等 把social_link注释掉 link注释了，本来想吧github的链接改为邮箱，貌似不能 打赏的全部注释了 icarus的可玩性貌似没有那么高，如果想更多的去添加博客的网页的功能，可以试一试Next这个主题。 bilibili上有专门讲解的使用Hexo博客搭建的个人博客，使用Next主题来进行优化改造 4.编辑博客在E:\\Blog\\source_posts目录下打开Git bash, 创建新文章： 1hexo n &quot;博客搭建&quot; 这里提供一些基本方法 博客的开头你需要更改才能适配到分类和标签下 123456---title: 博客搭建date: 2019-03-29 23:18:54tags: 博客有关categories: 博客--- 为了只显示部分开头内容，下面加上 1&lt;!-- more --&gt; 添加更多的标签12345678---title: 博客搭建date: 2019-03-29 23:18:54tags: -博客有关 -测试等categories: 博客---","link":"/2019/03/29/博客搭建/"},{"title":"数字IC设计面试100题","text":"主要来自知乎的整理 1. 什么是同步逻辑和异步逻辑？ 2.同步电路和异步电路的区别： 3. 时钟设计的实质： 4. 建立时间和保持时间的改变： 5. 为什么触发器要满足建立时间和保持时间？ 6. 什么是亚稳态？为什么两级触发器可以防止亚稳态？ 7. 系统最高速度计算（最快时钟频率）和流水设计思想？ *8.时钟约束的基本概念和基本策略？ 9.附加约束的作用？ 10.FPGA设计工程师努力的方向： 11.对于多位的异步信号如何进行同步？ 12.FPGA和CPLD的区别？ 13.锁存器（latch）和触发器(flip-flop)的区别？ 14.FPGA芯片内有哪两种的存储器资源？ 15.什么是时钟抖动？ 16.FPGA设计中对时钟的使用 17: FPGA设计中如何实现同步时序电路的延时 18.FPGA中可以综合实现为RAM/ROM/CAM的三种资源及其他注意事项？ 19. Xilinx中与全局时钟资源和DLL相关的硬件原语 20. HDL语言的层次概念？ 21:查找表的原理与结构？ 22.IC设计前端到后端的流程的EDA工具？ *23.寄生电容效应在IC设计中怎样克服和利用 24.设计题1–用触发器和逻辑门设计一个一位加法器 25. 设计自动饮料贩卖机 *26.什么是“线与逻辑”，要实现它，在硬件特性上有什么具体要求？ 27.什么是竞争冒险？怎么判断？如何消除？ *28.常用的逻辑电平？TTL和CMOS电平可以相互直连吗？ 29：IC设计中同步复位与异步复位的区别？ 30.Moore与Meeley状态机的特征？ 31.多时钟域设计中，如何处理信号跨时域问题？ 32.说说静态、动态时序模拟的优缺点？ *33.一个四级的Mux，其中第二级为关键信号，如何改善timing? 34.给出一个门级图，又给出了各个门的传输延时，问关键路径是什么？给出了输入，使得输出依赖于关键路径？ 35.为什么一个标准的倒相器中P管的宽长比要比N管的宽长比大？ 36、用mos管搭出一个与非门？ 37.画出NOT,NAND,NOR的符号，真值表，还有transistor level的电路 原文地址ictown_数字IC设计工程师笔试面试经典100题-有答案陈恩 1. 什么是同步逻辑和异步逻辑？答：同步逻辑是电路中的信号和FPGA时钟信号存在逻辑上的因果关系，而异步逻辑则是电路中的信号和FPGA时钟信号没有固有的因果关系。 同步时序逻辑电路的特点：各触发器的时钟端全部连在同一个时钟，只有在时钟上升沿或者下降沿，电路状态才会发生改变，改变的状态将保持到下一个时钟脉冲到来。因此无论外部输入信号有无变化，在这段时间内，状态表中的每个状态是稳定的。 异步时序电路：电路中除了可以使用带时钟的触发器以外，还可以使用不带时钟的触发器和延迟元件作为存储元件，电路中没有统一的时钟，电路的状态由外部输入的变化直接引起。 2.同步电路和异步电路的区别：答：同步电路：电路中所有的触发器都连接的是同一个时钟源，因此所有触发器的状态的变化都与所加的时钟脉冲信号同步。 异步电路：电路中没有统一的时钟，有的触发器的时钟输入与时钟脉冲源相连，只有这些脉冲的状态变化和时钟脉冲源同步，而其他的触发器状态不与时钟脉冲同步。 3. 时钟设计的实质：答：时钟设计的实质是满足每一个触发器的建立/保持时间的要求。 4. 建立时间和保持时间的改变：答：建立时间，触发器在时钟上升沿到来之前，数据输入端的数据必须保持不变的最小时间。 保持时间，触发器在时钟上升沿到来之后，数据输入端的数据必须保持不变的最小时间。 5. 为什么触发器要满足建立时间和保持时间？答：因为触发器内部数据的形成是需要一定的时间的，如果不满足建立时间和保持时间，输入在这段时间变化，触发器将进入亚稳态，进入亚稳态的输出将不稳定，在0和1之间变化，这时需要一个恢复时间，输出才能变得稳定。但稳定之后的输出可能不是你的输出值。 为了防止亚稳态的传播，我们通常用两级触发器来同步异步输入信号，这样可以防止异步输入信号对于本级时钟可能不满足建立保持时间而使本级触发器产生的亚稳态传播到下一级。 6. 什么是亚稳态？为什么两级触发器可以防止亚稳态？答：这是一个异步电路同步化的问题。亚稳态指的是触发器无法在某个规定时间段内到达一个可以确认的状态。使用两级触发器来使异步电路同步化的电路其实叫做“一位同步器”，他只能用来对一位异步信号进行同步。 两级触发器可以防止亚稳态传播的原理：假设第一级触发器输入不满足其建立时间保持时间，它的第一个脉冲到来后输出的数据就为亚稳态，那么在下一个脉冲到来之前，其输出的亚稳态数据将在一段恢复时间后必须平稳下来，而且稳定的数据必须满足第二级触发器的建立时间，如果都满足了，下一个脉冲沿到来之前，第二级脉冲器便不会出现亚稳态，因为其输入端的数据满足其建立保持时间。同步的有效条件：第一级触发器的进入亚稳态后的恢复时间+第二级触发器的建立时间&lt;=时间周期。 更确切的说，输入脉冲宽度必须大于同步时钟周期与第一级触发器所需的保持时间之和。最保险的脉冲宽度是两倍同步时钟周期，所以，这样的同步电路对于从慢的时钟域来的异步信号进入较快的时钟域是比较有效的，对于进入一个较慢的时钟域，则没有效果。 7. 系统最高速度计算（最快时钟频率）和流水设计思想？答：同步电路的速度是指同步系统时钟的速度，同步时钟越快，电路处理数据的时间间隔越短，电路在单位时间内处理的数据量就越大。 假设Tco是触发器的输入数据被时钟打入到触发器到数据到达触发器的输出端的延时（Tco=Tsetup+Thold)。Tsetup是D触发器的建立时间；Tdelay是组合逻辑的延时。 加入数据已经被打入D触发器，那么数据到达第一个触发器Q输入出端需要的延时是Tco，经过组合逻辑延时Tdeleay，到达第二个触发器的D端，要希望时钟能在第二个触发器再次被稳定的打入到触发器，则时钟的延迟必须大于Tco+Tdelay+Tsetup，也就是说最小的时钟周期为Tmin=Tco+Tdelay+Tsetup，最快的时钟频率为Fmax=1/Tmin。 FPGA开发软件也是通过这种方式来计算系统的最高允许速度Fmax。因为Tco和Tsetup都是由具体的器件工艺决定的，固设计电路只能改变组合逻辑的延迟时间Tdelay，所以说缩短触发器间的组合逻辑的延时时间是提高同步电路速度关键所在。 由于一般同步电路都大于以及锁存，而要是电路稳定工作，时钟周期必须满足最大延时要求。故只有缩短最长延时路径，才能提高电路的工作频率，可以将较大的组合逻辑分为N个小模块，通过适当的方法平均分配组合逻辑，然后中间插入寄存器，并和原触发器使用相同的时钟。这样就可以提高电路的工作频率。这就是所谓的“流水线技术”实现的基本设计思想，即原设计速度受限部分用一个时钟周期实现，采用流水线技术插入寄存器，可以用N个时钟周期实现，因此系统的工作速度可以加快，吞吐量加大。但是，流水线设计会在源数据通路上加上延时，另外硬件面积开销增加。 *8.时钟约束的基本概念和基本策略？答：时钟约束主要包括周期约束，偏移约束，静态时序路径约束三种。通过附加时序约束可以综合布线工具调整映射和布局布线，使设计达到时序要求。 附加时序约束一般策略是先附加全局约束，然后对快速和慢速例外路径附加专门约束。附加全局约束时，首先先定义设计的所有时钟，对各时钟域的同步元件进行分组，对分组附加周期约束，然后对FPGA/CPLD输入输出PAD附加偏移约束、对全组合逻辑的PAT TO PAD路径附加约束。附加专门约束时，首先约束分组之间的路径，然后约束快，慢速路径和多周期路径，以及其他特殊路径。 9.附加约束的作用？答： 提高设计的工作频率（减少逻辑和布线延时)； 获得正确的时序分析报告；(静态时序分析工具以约束作为判断时序是否满足设计要求的标准，因此要求设计者正确输入约束，以便静态时序分析工具可以正确输出时序报告） 指定FPGA/CPLD的电器标准和引脚位置 10.FPGA设计工程师努力的方向：答：SOPC，高速串行I/O，低功耗，可靠性，可测试性和设计验证流程优化等方面。 随着芯片工艺的提高，芯片容量、密集度都在增加，FPGA设计也在朝着高速，高度集成、低功耗、高可靠性、高可测、可验证性发展。 芯片可测、可验证，正成为复杂设计所必备的条件，尽量在上板之前查出BUG，将发现BUG的时间提前，这也是一些公司花大气力设计仿真平台的原因。随着单板功能的提高、成本的压力，低功耗也逐渐进入FPGA设计者考虑的范围，完成相同的功能下如何能够使芯片的功耗最低，据说altera、xilinx都在根据自己的芯片特点整理出如何降低功耗的文档。 高速串行IO的应用，也丰富了FPGA的应用范围，像xilinx的v2 pro中的高速链路也逐渐被应用。 11.对于多位的异步信号如何进行同步？答：对于一位的异步信号可以使用“一位同步器进行同步”（使用两级触发器），而对于多位的异步信号，可以采用如下方法：1：可以采用保持寄存器加握手信号的方法（多数据，控制，地址）；2：特殊的具体应用电路的结构，根据应用的不同而不同；3：异步FIFO。（最常用的是DPRAM） 12.FPGA和CPLD的区别？答： CPLD更适合完成各种算法和组合逻辑，FPGA更适合于完成时序逻辑。换句话说，FPGA更适合于触发器丰富的结构，而CPLD更适合触发器有限而乘积项丰富的结构。 CPLD的连续式布线结构决定了它的时序延迟是均匀的和可预测的，而FPGA的分段式布线结构决定了其延迟的不可预测性。 在编程上FPGA比CPLD具有更大的灵活性。CPLD通过修改具有固定内连电路的逻辑功能来编程，FPGA主要通过改变内部连线的布线来编程；FPGA可在逻辑门下编程，而CPLD是在逻辑块下编程。 FPGA的集成度比CPLD高，具有更复杂的布线结构和逻辑实现。 CPLD比FPGA使用起来更方便。CPLD的编程采用E2PROM或FASTFLASH技术，无需外部存储器芯片，使用简单。而FPGA的编程信息需存放在外部存储器上，使用方法复杂。 CPLD的速度比FPGA快，具有较大的时间可预测性。这是由于FPGA是门级编程，并且CLB之间采用分布式互联，而CPLD是逻辑块级编程，并且其逻辑块之间互联是集总式的。 在编程方式上，CPLD主要是基于E2PROM或FLASH存储器编程，编程次数可达1万次，优点是系统断电时编程信息也不丢失。CPLD又可分为在编 程器上编程和在系统编程两类。FPGA大部分是基于SRAM编程，编程信息在系统断电时丢失，每次上电时，需从器件外部将编程数据重新写入SRAM中。其 优点是可以编程任意次，可在工作中快速编程，从而实现板级和系统级的动态配置。 CPLD保密性好，FPGA保密性差。 一般情况下，CPLD的功耗要比FPGA大，且集成度越高越明显。 13.锁存器（latch）和触发器(flip-flop)的区别？答：电平敏感的存储器称为锁存器。可分为高电平锁存器和低电平锁存器，用于不同时钟之间信号的同步。 由交叉耦合的门构成的双稳态的存储原件称为触发器。分为上升沿触发和下降沿触发。可以认为是两个不同电平敏感的锁存器串联而成。前一个锁存器决定触发器的建立时间，后一个锁存器决定保持时间。 14.FPGA芯片内有哪两种的存储器资源？答：FPGA芯片内部有两种存储器资源：一种是BLOCK RAM，另一种是由LUT配置成的内部存储器（分布式RAM）。 BLOCK RAM是由一定数量固定大小的存储块构成的，使用BLOCK RAM资源不占额外的逻辑资源，而且速度快。但是使用的时候消耗的BLOCK RAM资源是其块大小的整数倍。 15.什么是时钟抖动？答：时钟抖动是指芯片的某一个点上时钟周期发生暂时性的变化，也就是时钟周期在不同的周期上可能加长或者缩短。它是一个平均值为0的平均变量。 16.FPGA设计中对时钟的使用答：FPGA芯片有固有的时钟路由，这些路由能有减少时钟抖动和偏差。需要对时钟进行相位移动和变频的时候，一般不允许对时钟进行逻辑操作，这样会增加时钟的偏差和抖动，还会使时钟带上毛刺，一般的处理方法是采用FPGA芯片自带的时钟管理器PLL,DLL或DCM，或者把逻辑转换到触发器的D输入（这些也是对时钟逻辑操作的替代方案） 17: FPGA设计中如何实现同步时序电路的延时答：首先异步电路的延时实现：异步电路一半是通过加Buffer、两级与非门等来实现延时，但这不是很适合同步电路实现延时。在同步电路中，对于比较大的和特殊的要求的延时，一般是通过高速时钟产生计数器，通过计数器来控制延时，对于比较小的延时，可以通过触发器打一拍，不过这样只能延迟一个时钟周期。 18.FPGA中可以综合实现为RAM/ROM/CAM的三种资源及其他注意事项？答：三种资源：BLOCK RAM，触发器（FF），查找表（LUT）; 注意事项： 在生成RAM等存储单元时，应该首选BLOCK RAM；原因有二：第一：使用BLOCK RAM等资源，可以节约更多的FF和4-LUT等底层可编程单元。使用BLOCK RAM可以说是“不用白不用”，是最大程度发挥器件性能，节约成本的一种体现。第二：BLOCK RAM是一种可以配置的硬件结构，其可靠性和速度与用LUT和Register构建的存储更有优势的。 弄清FPGA的硬件结构，合理使用BLOCK RAM资源。 分析BLOCK RAM容量，高效使用BLOC RAM资源。 分布式RAM资源（Distribute RAM） 19. Xilinx中与全局时钟资源和DLL相关的硬件原语答：常用的与全局时钟资源有关的Xilinx器件原语包括：IBUFG,IBUFGS,BUFG,BUFGP,BUFGCE,BUFGMX,BUFGDLL,DCM等，关于各个器件原语的解释可以参考《FPGA设计指导准则》p50部分 20. HDL语言的层次概念？答：HDL语言是分层次的、类型的，最常用的层次概念有系统与标准级，行为级，寄存器传输级和门级。 系统级，算法级，RTL级(行为级)，门级，开关级。 21:查找表的原理与结构？答：查找表（Look up table）简称LUT, LUT本质上就是一个RAM。目前FPGA中多使用4输入LUT,所以每一个LUT可以看成一个有4位地址线的16x1的RAM。当用户通过原理图或者HDL语言描述了一个逻辑电路，PLD/FPGA开发软件会自动计算逻辑电路的所有可能的结果，并把结果事先写入RAM，每输入一个信号进行逻辑运算就等于输入一个地址进行查表，找出地址对应的内容，然后输出即可。 22.IC设计前端到后端的流程的EDA工具？答：设计前端也称为逻辑设计，后端也称为物理设计，两者并没有严格的界限，一般涉及与工艺有关的设计就是后端设计。 规格制定：客户向芯片设计公司提出设计要求。 详细设计：芯片设计公司（Fabless）根据客户提出的规格要求，拿出设计解决方案和具体实现架构，划分模块功能。目前架构的验证一般基于systemC语言，对价后模型的仿真可以使用systemC的仿真工具。例如CoCentric和Visual Elite等。 HDL编码：设计输入工具：ultra， visiual VHDL等 仿真验证：modelsim 逻辑综合：synplify 静态时序分析：synopsys的Prime Time 形式验证：Synopsys的Formality *23.寄生电容效应在IC设计中怎样克服和利用或者，IC设计过程中将寄生效应怎样反馈影响设计师的设计方案？答：所谓寄生效应就是那些溜进你的PCB并在电路中大破坏、令人头疼、原因不明的小故障。他们就是渗入高速电路中隐藏的寄生电容和寄生电感。其中包括由封装引脚和印制线过长形成的寄生电感；焊盘到地、焊盘到电源平面和焊盘到印制线之间形成的寄生电容；通孔之间的相互影响，以及许多其它可能的寄生效应。 理想状态下，导线是没有电阻，电容和电感的。而在实际中，导线用到了金属铜，它有一定的电阻率，如果导线足够长，积累的电阻也相当可观。两条平行的导线，如果互相之间有电压差异，就相当于形成了一个平行板电容器。通电的导线周围会形成磁场（特别是电流变化时），磁场会产生感生电场，会对电子的移动产生影响，可以说每条实际的导线包括元器件的管脚都会产生感生电动势，这也就是寄生电感。 在直流或者低频情况下，这种寄生效应看不太出来。而在交流特别是高频交流条件下，影响就非常巨大了。根据复阻抗公式，电容、电感会在交流情况下会对电流的移动产生巨大阻碍，也就可以折算成阻抗。这种寄生效应很难克服，也难摸到。只能通过优化线路，尽量使用管脚短的SMT元器件来减少其影响，要完全消除是不可能的。 24.设计题1–用触发器和逻辑门设计一个一位加法器1234567891011121314151617181920212223module (clk, rst_n, current_stage, carryin,next_stage,carryout);input clk, rst_n;//时钟和复位，复位低电平有效input current_stage; //输人加数 input carryin; //输入进位output reg next_stage; //加法输出output reg carryout;// 输出进位标识always @(posedge clk or rst_n)begin//触发器 if(!rst_n) begin carryout &lt;= 1'b0; next_stage &lt;= 1'b0; end else begin carryout &lt;= carryin &amp;&amp; current_stage; //与门 next_stage &lt;= (~carryin&amp;&amp;current_stage)||(carryin&amp;&amp;~current_stage); //两个与门加上或门 endend endmodule 25. 设计自动饮料贩卖机要求：饮料10分钱，硬币有5分钱和10分钱两种，并考虑找零 画出fsm(有限状态机) 用verilog编程，语法要符合FPGA设计的要求 设计工程中可食用的工具及设计过程 设计过程： 首先确定输入输出，A=1表示投入10分，B=1表示投入5分，Y=1表示弹出饮料，Z=1表示找零 画出电路的状态，S0表示没有进行投币，S1表示已有的5分硬币 画出状态转移图 12345678910111213141516171819202122232425262728293031323334353637383940414243444546module test(clk, rst_n, a, b, y, z);input clk, rst_n;input a, b; //a, 投入5分；b, 投入10分output reg y; //弹出饮料output reg z; //找零reg state, next_state; //两段式状态机写法parameter s0 = 1'b0, s1 = 1'b1;//s0: 没有进行投币， s1,已经有5分硬币always @(posedge clk or negedge rst_n)beginif(!rst_n) state &lt;= s0; else state &lt;= next_state;endalways @(posedge clk or negedge rst_n)beginif(!rst_n) begin y &lt;= 1'b0; z &lt;= 1'b0;endelse begin case(state) s0: if(a&amp;&amp;!b) next_state &lt;= s1; //投入了5分 else if(!a&amp;&amp;b) begin //投入了10分 next_state &lt;= s0; y &lt;= 1'b1; end else next_state &lt;= s0; s1: if(a&amp;&amp;!b) begin //再投入5分 next_state &lt;= s0; y &lt;= 1'b1; end else if(!a&amp;&amp;b) begin next_state &lt;= s0; y &lt;= 1'b1; z &lt;= 1'b1; end else next_state &lt;= s1; default : next_state &lt;= s0; endcaseendendendmodule 状态转移图如下所示： *26.什么是“线与逻辑”，要实现它，在硬件特性上有什么具体要求？答：线与逻辑是两个输出信号相连可以实现与的功能。在硬件上，要用oc门来实现，由于不用oc门可能使灌电流过大，而烧坏逻辑门，同时在输出端口应加一个上拉电阻。oc 门是集电极开路门。od门是漏机开路门。 27.什么是竞争冒险？怎么判断？如何消除？答：在组合电路，门电路两个输入信号同时向相反的逻辑电平跳变称为竞争，某输入变量经过不同的路径传输后，到达电路中某一回合点的时间有先后，由于竞争而使电路输出发生错误的现象称为冒险。（也就是由于竞争产生的毛刺） 判断方法： 代数法（如果布尔式中有相反的信号则可能产生竞争和冒险现象） 卡诺图：有两个相切的卡诺圈并且相切处没有被其他卡诺圈包围，就有出现竞争冒险的可能 实验法: 示波器观测 解决方法： 加滤波电容，消除毛刺的影响 加选通信号，避开毛刺 增加冗余项，消除逻辑冒险 *28.常用的逻辑电平？TTL和CMOS电平可以相互直连吗？答：常用的逻辑电平有12v、5v、3.3v TTL和CMOS不可以直连，由于TTL是在0.3-3.6v，而CMOS是12v有的是5v，CMOS输出接到TTL可以直连。TTL接到CMOS需要在输出端口加上一上拉电阻接到5v或者12v 用CMOS可以直接驱动TTL; 加上上拉电阻后，TTL可以驱动CMOS 上拉电阻用途： 当TTL电路驱动COMS电路时，如果TTL电路输出的高电平低于COMS电路的最低高电平（一般为3.5V），这时就需要在TTL的输出端接上拉电阻，以提高输出高电平的值。 OC门电路必须加上拉电阻，以提高输出的高电平值。 为加大输出引脚的驱动能力，有的单片机管脚上也常使用上拉电阻。 在COMS芯片上，为了防止静电造成损坏，不用的管脚不能悬空，一般接上拉电阻产生降低输入阻抗，提供泄荷通路。 芯片的管脚加上拉电阻来提高输出电平，从而提高芯片输入信号的噪声容限增强抗干扰能力。 提高总线的抗电磁干扰能力。管脚悬空就比较容易接受外界的电磁干扰。 长线传输中电阻不匹配容易引起反射波干扰，加上下拉电阻是电阻匹配，有效的抑制反射波干扰。 上拉电阻阻值的选择原则包括: 从节约功耗及芯片的灌电流能力考虑应当足够大；电阻大，电流小。 从确保足够的驱动电流考虑应当足够小；电阻小，电流大。 对于高速电路，过大的上拉电阻可能边沿变平缓。综合考虑以上三点,通常在1k到10k之间选取。对下拉电阻也有类似道理。 OC门电路必须加上拉电阻，以提高输出的高电平值。 OC门电路要输出“1”时才需要加上拉电阻不加根本就没有高电平 在有时我们用OC门作驱动（例如控制一个 LED）灌电流工作时就可以不加上拉电阻 总之加上拉电阻能够提高驱动能力。 29：IC设计中同步复位与异步复位的区别？答：同步复位在时钟沿变化，完成复位动作。异步复位不管时钟，只要复位信号满足条件，就完成复位动作。异步复位对复位信号要求比较高，不能有毛刺，如果其与时钟关系不确定，也可能出现亚稳态。 30.Moore与Meeley状态机的特征？答：Moore状态机的输出仅与当前状态值有关，且只在时钟边沿到来时才会发生变化。 Mealy状态机的输出不仅与当前状态值有关，而且与当前输入值有关。 31.多时钟域设计中，如何处理信号跨时域问题？答：不同时钟域之间的信号通信需要进行同步处理，这样可以防止新时钟域中的第一级触发器出现的亚稳态对下级逻辑造成影响。 信号跨时钟域同步：当单个信号跨时钟域时，可以采用两次触发器来同步；数据或地址总线跨时钟域时可以采用异步FIFO来实现时钟同步；第三种方法是采用握手信号。 32.说说静态、动态时序模拟的优缺点？答：静态时序分析是采用穷尽的分析方式来提取出整个电路存在的所有时序，计算信号在这些路径上的传播延时，检查信号的建立时间和保持时间是否满足时序的要求，通过最大路径延时和最小路径延时延时的分析，找出违背时序约束的错误。它不需要输入向量就能穷尽所有路径，且运行速度快，占用内存较少，不仅可以对芯片设计进行全面的时序功能检查，而且还可以利用时序分析的结果优化设计，因此时序分析越来越多的被用到了数字集成电路设计的验证中。 动态时序模拟就是通常的仿真，因为不可能产生完备的测试向量，覆盖门级网表的每一条路径。因此在动态时序分析中，无法暴露一些路径上可能存在的时序问题。 *33.一个四级的Mux，其中第二级为关键信号，如何改善timing?答：将第二级信号放到最后一级输出，同时注意改善片选信号，保证其优先级没有被修改。 34.给出一个门级图，又给出了各个门的传输延时，问关键路径是什么？给出了输入，使得输出依赖于关键路径？答:关键路径就是输入到输出的延时路径的最大路径，找到了关键路径就能求最大时钟频率。 35.为什么一个标准的倒相器中P管的宽长比要比N管的宽长比大？答：和载流子有关，P管是空穴导电，N管是电子导电，电子迁移率大于空穴，同样的电场下，N管的电流大于P管，因此要增大P管的宽长比，使之对称，这样才能使得两者上升时间下降时间相等、高低电平的噪声容限一样、充放电的时间相等。 36、用mos管搭出一个与非门？答：与非门，上并下串。或非门，上串下并 参考博客：MOS管及简单的CMOS逻辑门电路原理图 37.画出NOT,NAND,NOR的符号，真值表，还有transistor level的电路答：NOT门,其他两个门参考题36","link":"/2019/03/30/数字IC设计面试100题/"},{"title":"Intel概率计算报道","text":"1.英特尔实验室介绍 神经拟态计算简介 概率计算简介 2.概率计算使人工智能进入下一个时代 3.英特尔开始为人工智能进行概率计算的研发工作 4.英特尔实验室主任谈量子，概率和神经拟态计算 1.英特尔实验室介绍英特尔实验室与全球领先的研究机构合作并为其提供赞助。其中包括著名的大学科技中心，国家科学基金会和半导体研究公司。英特尔和这些机构的研究正在改变机器的思考，学习和适应方式。 神经拟态计算简介随着人工智能工作变得更加多样化和复杂化，而当今主流计算架构将达到极限。英特尔的研究人员认为，神经拟态计算提供了前进的方向，并且正在推进旨在提供百万兆级运算的研究，这将提高传统计算能力并为新的计算应用开辟可能性。2017年9月，英特尔实验室推出了第一款具有自学能力的神经拟态研究芯片“Loihi。”英特尔与领先的大学和研究合作伙伴合作，对Loihi芯片进行测试，该芯片具有模拟大脑基本功能的数字电路，使机器学习更快，更高效，同时降低计算功耗需求，帮助处理复杂的数据集和问题。 由英特尔实验室构建的测试板展示了英特尔Loihi神经形态研究芯片的功能。（来自：英特尔公司） Intel给出的神经拟态视频：1.神经拟态，智能和计算的未来 2.神经拟态，旨在模拟人类大脑 3.Intel实验室中的Loihi 概率计算简介计算机的构建是为了帮助人们完成精确的生产任务，如果使计算机有效地处理大规模概率，可以将当前系统和应用程序从高级计算辅助工具，转变为智能合作伙伴以进行理解和决策。2018年5月，英特尔宣布增加对概率计算研究的投资，并呼吁学术界和初创社区与Intel合作，将实验室中的概率计算推进到这些载体：基准应用，对抗性攻击缓解，概率框架，以及软件和硬件优化。在接下来的几年里，英特尔的领导者预计该公司在概率计算方面的研究将带来可靠性和安全性方面的重大改进， Mayberry：Computing In the Area of AI 原网站链接：https://newsroom.intel.com/press-kits/intel-labs 2.概率计算使人工智能进入下一个时代新闻时间：2018年5月 Intel加速在概率计算方面的研究并诚邀合作伙伴探讨下一代人工智能 By Dr. Michael Mayberry 人工智能（AI）的潜在影响从未如此强大 - 但只有AI能够提供更智能，更直观的答案，我们才能取得成功。 今天人工智能的一个主要障碍是，提供给计算机的自然数据在很大程度上是非结构化的并且“嘈杂”。 人类很容易对自然数据进行处理。例如：如果你在住宅街道上开车并在你面前看到一个球滚动，你会停下来，假设有一个小孩子在球的后面不远处。今天的计算机不这样做。它们旨在帮助人们完成精确的生产任务。使计算机有效地处理大规模概率，是我们将当前系统和应用程序，从高级计算辅助工具转换为智能合作伙伴，以进行理解和决策的能力的核心。 这就是为什么概率计算是人工智能的一个关键组成部分，也是应对这些挑战的关键。概率计算将允许未来的系统理解和计算自然数据中固有的不确定性，这将使我们能够构建能够理解，预测和决策的计算机。 今天在英特尔，我们正在观察依赖于对嘈杂的自然数据进行分析的应用的空前增长 - 不同甚至相互冲突的信息。这些应用旨在帮助人们提供更高水平的智能和对其运行环境的认识。切入这个嘈杂的雷区对我们将计算机转变为智能合作伙伴的能力至关重要，这些合作伙伴可以理解并信息，并以人类般的忠诚度般，采取行动。 对概率计算的研究并不是一个新的研究领域，但高性能计算和深度学习算法的改进可能会使概率计算进入一个新时代。在接下来的几年中，我们预计概率计算的研究将导致AI系统的可靠性，安全性，可维护性和性能的显着提高，包括专为概率计算而设计的硬件。这些进步对于将应用程序部署到现实世界至关重要 - 从智能家居到智能城市。 为了加快我们在概率计算方面的工作，英特尔正在增加对概率计算的研究投资，我们正在与合作伙伴共同努力实现这一目标。 建立英特尔概率计算战略研究联盟 实现概率计算的全部潜力涉及计算技术中多个领域。今天，英特尔强调了其对新兴计算架构的整合，协作实施以及健全的生态系统支持战略的承诺，向学术界和初创社区发出呼吁，通过与Intel合作，将概率计算从实验室推进到现实：基准应用程序，对抗性攻击缓解，概率框架以及软件和硬件优化。 关注下一步是什么 我们非常渴望看到推进概率计算的提议，并继续这项研究，有可能提高人工智能可以帮助我们实现的目标。学术提案预计将在5月25日之前提交，其中我们将选择最好的研究团队。 我们通过对神经形态计算的研究开始了这一旅程 - 专注于我们对人类大脑及其相关计算过程的理解。3月1日宣布的神经拟态研究界的开始也正在进行中，我们计划继续扩大我们在云上的Loihi，以便研究人员能够使用先进硬件。我们看到2019年在单一系统上达到1000亿个突触。 此外，作为与普林斯顿大学合作的一部分，英特尔已经致力于解码大脑并推进神经科学的下一阶段。我们期待通过我们的概率计算工作进一步了解人类理解问题和决策的流程。 原网站链接：概率计算使得人工智能进入下一个时代 3.英特尔开始为人工智能进行概率计算的研发工作时间：2018年5月10日 英特尔今天宣布，它正在组建一个战略研究联盟，将人工智能提升到新的水平。自治系统没有足够好的方法来应对现实世界的不确定性，而且它们没有足够好的方法来理解传感器的不确定性如何影响他们需要做出的决策。根据英特尔首席技术官Mayberry的说法，答案是“概率计算”，他说这可能是人工智能的下一波浪潮。 IEEE Spectrum:这项新研究的主旨是什么？ Mayberry:我们正试图弄清楚下一波人工智能是什么。AI的原始浪潮基于逻辑，它基于写下规则; 它最接近你所谓的经典推理。当前的AI浪潮围绕sensing and perception - 使用卷积神经网络扫描图像并查看是否存在感兴趣的东西。这并不人类认知世界的方式。 假如你听到汽车警报声。您会自动考虑与拥有的数据一致的不同场景，并且还会意识到没有的数据。你会推断一个概率。也许概率是在确定警笛是来自你前面还是后面。或者是否会让你迟到会议。您自动执行机器遇到问题的事情。我们在现实生活中始终遇到这些情况，因为目前的情况始终存在不确定性。 目前人工智能和深度学习系统被认为是脆弱的。意思是他们对答案过于自信。他们会毫不犹豫地说，它认为图片中有某些内容可以识别它。但在许多情况下，概率是不正确的; 信心并不像[AI]认为的那么高。 因此，我们想要在一般研究重点中做的是弄清楚如何在我们的推理系统和我们的传感系统中建立概率。而且真的有两个挑战。一个是你如何用概率进行计算，另一个是如何用概率存储记忆或场景。 所以我们已经做了一定数量的内部工作和学术界，我们已经决定在这里有足够的东西我们将开始研究社区。目标是让人们分享他们对它的了解，进行协作，编写软件时如何表示概率，以及如何构建计算机硬件。我们认为这将是……第三波人工智能的一部分。 IEEE Spectrum:概率计算用于描述过去与AI无关的许多事情，例如随机计算(stochastic computing)和容错计算(error-tolerant computing)。它到底是什么样的？ Mayberry:我们使用[概率计算]与以前略有不同。例如，随机计算即使有错误也能获得足够好的答案。模糊逻辑实际上更接近我们在这里讨论的概念，在处理信息时，你故意跟踪不确定性。还有统计计算，这实际上更像是一种软件方法，你可以通过构建树来跟踪概率。所以，这些不一定是新概念。但我们打算以不同于过去的方式应用它们. IEEE Spectrum:这会涉及新型设备吗？ Mayberry:我们最初会通过查看算法来接近它。我们对英特尔的偏见是构建硬件，但如果我们不真正了解使用模型将如何演变或算法将如何演变，那么我们就有可能过早地承诺使用这条路径。因此，我们最初将围绕算法和软件框架进行研究。你必须尽早考虑安全问题。这些是我们将要接近的事情。 （Mayberry推荐了了Vikesh Mansighka 的工作， 他是麻省理工学院Probablistic Computing Project的负责人。） IEEE Spectrum:这如何适应英特尔现有的AI工作？ Mayberry:这是一个包含我们现有工作的大型系统的一部分…. 您不希望您的逻辑系统假设您的传感是100％准确的，但您不希望传感器必然也有关于置信度的错误信息。因此，您必须围绕这两个组件如何相互通信并跟踪这类信息来构建一个系统。因此传感系统可能会报告“我的亮度发生了变化” - 因此我的答案比以前更有信心。 跟踪这类信息是系统设计的一部分。从软件框架的角度来看，我们并不确切知道如何实现这一点。 IEEE Spectrum:有哪些潜在的应用？Mayberry:当然，我们的目标之一是拥有更好的自动机器，无论是汽车还是家用机器人，还是类似的东西。我们认为[概率计算]是使系统更加健壮的重要部分。受到高度约束的系统不太可能需要这种能力。您将系统置于一个开放的环境中的时间越多，有更多的东西需要改变，您就越有可能需要补充我们今天使用的系统。我们当然希望这将在几年内变成产品，但这是前路线图。所以我们现在不承诺任何事情。原网站链接：英特尔开始为人工智能进行概率计算的研发工作# 4.英特尔实验室主任谈量子，概率和神经拟态计算4.英特尔实验室主任谈量子，概率和神经拟态计算 报道时间：2019年3月1日 去年年底接管英特尔实验室的Rich Uhlig讨论了英特尔对未来计算的愿景 英特尔通过不断寻找使CPU更快，更高效的方法，为自己做得非常好。但随着摩尔定律的终结，英特尔一直在探索利用创新架构扩展计算的方法。 量子计算是其中一项举措，英特尔实验室一直在测试自己的49-qubit处理器。除此之外，英特尔实验室正在探索神经形态计算（模拟结构，并希望通过人工神经网络模拟人脑的一些功能）以及概率计算，旨在帮助满足量化人工智能不确定性的应用需求。 Rich Uhlig自2018年12月以来一直担任英特尔实验室的主管，自1996年以来一直在英特尔工作（最近担任英特尔实验室的系统和软件研究总监），所以他似乎很有资格担任该职务。我们与Uhlig讨论了量子，神经形态和概率计算，这些系统将如何帮助我们管理AI，以及这些技术将使这些技术成为可能的事情至少应该引起我们的关注。 IEEE Spectrum:根据英特尔量子计算的时间表，我们目前处于“系统阶段”。这意味着什么，我们将如何过渡到商业阶段？ Rich Uhlig：在英特尔，我们专注于开发商业上可行的量子计算机，这需要比量子比特本身更多。我们已经成功制造了一个49比特的超导芯片，这使我们能够开始将量子处理单元（QPU）集成到一个系统中，在这个系统中我们可以构建所需的所有元件，使量子位同时协同工作以改善效率和可扩展性。我们正在努力创建一个可行的量子系统，从50个量子比特扩展到商业系统所需的数百万个量子比特。 IEEE Spectrum:我们希望通过神经形态计算来模仿它的大脑有什么好处？ Rich Uhlig：大脑的魅力在于它能够实时处理高度复杂的信息，并且能量很少。我们的目标不一定是模仿大脑，而是要了解为大脑提供如此令人印象深刻和高效的功能的原则，然后将这些原则应用于我们可以构建的芯片。许多与细粒度并行性，动态计算，信息时间编码，事件驱动操作等相关的原则直接激发了我们认为将导致两者的突破性增益的新特性，体系结构和算法。计算系统的能力和效率。 IEEE Spectrum:为什么概率计算足以使英特尔的量子和神经拟态并列？ Rich Uhlig：概率计算使我们能够处理我们周围的自然数据的不确定性，并通过理解数据和模型的不确定性来预测世界上的事件。只有当我们知道如何用概率分布模拟我们周围的世界时，才能预测场景中接下来会发生什么，以及我们的行动的影响。通过使用概率方法增强深度学习所提供的不确定性测量打开了理解人工智能系统为何做出决策的大门，这将有助于解决人工智能系统中的偏差等问题。 我们对概率计算的研究实际上是关于建立一种评估下一波人工智能性能的新方法 - 一种需要对“噪声”数据进行实时评估的方法。第一代AI系统专注于逻辑：预编程规则。第二波人工智能旨在提高感知和感知信息的能力，利用神经网络随着时间的推移进行学习。但是，这些解决方案都不能做到人类在我们在真实世界自然而然地做的事情。无法根据您手头的数据思考多种潜在的情景，同时意识到您没有的潜在数据。 为什么这个概念如此重要的一个例子是，如果你正在开车并且看到一个足球滚到街上，你的直接和自然的反应是停车，因为我们可以假设一个孩子在球后跑，并且离的不远。 根据自然数据的经验和人类行为的假设，驾驶员决定停车。但是，传统的计算机很可能无法实时得出相同的结论，因为今天的系统没有被编程为有效地挖掘噪声数据并根据环境意识做出决策。但是，对于像自动驾驶这样的应用程序，可能需要一个概率系统来调用一个可以快速评估情况并立即采取行动。 IEEE Spectrum:是否需要用于神经形态和概率计算的新型设备？这些需要具备哪些属性？ Rich Uhlig：目前，我们相信受这些新计算范例启发的创新可以为使用当今工艺技术制造的芯片提供有意义的收益。但是，在未来几年，并且要继续发展，我们将需要设备级的进步。在神经形态计算的情况下，将需要更密集的存储器技术和具有非易失性塑性动力学的新材料。在概率计算的情况下，它将扩展AI解决方案以包括能够以概率分布进行计算的新颖且有效的实现。对于神经形态和概率计算，最终的效率增益可能需要利用物理噪声源的设备和电路直接体现随机动态。 IEEE Spectrum:新设备是否会影响英特尔所关注的计算类型，或者是为设备设计新的计算方法？ Rich Uhlig：它是两个方向的相互作用。设备技术和摩尔定律的发展使新架构成为可能，新的架构理念正在推动未来设备技术的需求。但是，对两者的真正驱动要求是我们在世界上收集的指数数量的新数据。这些数据的收集，存储和分析将需要新的计算模型，并有可能为我们所有人创造难以置信的新体验。 IEEE Spectrum:AI的未来是否会刺激神经网络？ Rich Uhlig：脉冲神经网络（SNN）是当今用于深度学习的人工神经网络的自然继承者。通过将时间动态直接集成到其操作中，SNN非常适合于处理真实的感觉数据，例如声音或视频，尤其是在需要快速响应和适应时。从算法的角度来看，脉冲神经元为构建神经网络提供了一种原则性方法，可以及时处理事件，例如支持一次性学习或做出决策。从实现角度来看，脉冲允许神经形态体系结构利用这些算法的高度稀疏活动来提高能效。这些优势为边缘设备提供了巨大价值，例如在制造车间，自动驾驶车辆， IEEE Spectrum:您认为大多数人将从中受益的量子和神经形态计算的第一个实际应用是什么？？ Rich Uhlig：量子计算将解决传统计算机需要数月或数年才能解决的问题，或者今天完全难以解决的问题。这可能包括药物开发，财务建模和气候预测等问题。对于神经形态芯片，第一个应用可能是那些需要实时定制预训练功能的应用，这取决于特定设备的独特环境。例如，神经形态芯片可以使语音识别系统能够自主地适应以识别具有强烈重音的用户，或者在动态环境中控制机器人手臂。 IEEE Spectrum:有没有人担心使用这些计算技术会让我们更难理解为什么未来的计算系统会做出他们做出的决定？决策在何种程度上可以解释，我们如何改进？ Rich Uhlig：这是一个有效的关注和活跃的研究领域，你可以称之为“可解释的人工智能”。例如，我们绝不会建议推出一种可能危及人类安全的设备，如果它的工程师无法清楚说明它是如何或为什么会出现在它做了。我们认为概率计算可能提供一些优势，因为它提供了一个框架，用于理解答案中的潜在错误，这可能对更高级别的策略有用，这些策略决定系统最终如何参与物理世界。","link":"/2019/04/01/Intel概率计算报道/"}],"tags":[{"name":"项目","slug":"项目","link":"/tags/项目/"},{"name":"博客遇到的问题","slug":"博客遇到的问题","link":"/tags/博客遇到的问题/"},{"name":"其他","slug":"其他","link":"/tags/其他/"},{"name":"概率计算","slug":"概率计算","link":"/tags/概率计算/"},{"name":"博客有关","slug":"博客有关","link":"/tags/博客有关/"},{"name":"求职","slug":"求职","link":"/tags/求职/"}],"categories":[{"name":"Intel与概率计算","slug":"Intel与概率计算","link":"/categories/Intel与概率计算/"},{"name":"博客","slug":"博客","link":"/categories/博客/"},{"name":"软件工具","slug":"软件工具","link":"/categories/软件工具/"},{"name":"probabilistic programming","slug":"probabilistic-programming","link":"/categories/probabilistic-programming/"},{"name":"数字IC设计","slug":"数字IC设计","link":"/categories/数字IC设计/"}]}